on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

name: test-coverage

jobs:
  test-coverage:
    runs-on: macOS-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - uses: r-lib/actions/setup-r@v2

      - uses: r-lib/actions/setup-pandoc@v2
      
      # dd: Using gfortran should be easier than this; however, modifying
      # ~/.R/Makevars doesn't appear to work in this context; nor does
      # ln -s with the library directory. This part of the action is
      # temporary and should be removed when CRAN oce can be used
      #DEK#- name: Link gfortran for devel oce 
      #DEK#  run: |
      #DEK#    ln -s `which gfortran-10` /usr/local/bin/gfortran
      #DEK#    gfortran --version || true
      #DEK#    ls /usr/local/Cellar/gcc | tail -n 1
      #DEK#    
      #DEK#    sudo mkdir -p /usr/local/gfortran
      #DEK#    sudo cp -r /usr/local/Cellar/gcc/`ls /usr/local/Cellar/gcc | tail -n 1`/lib/gcc/10 /usr/local/gfortran/lib
      #DEK#    sudo chmod 755 /usr/local/gfortran
      #DEK#    sudo chmod 755 /usr/local/gfortran/lib
      #DEK#    
      #DEK#    ls /usr/local/gfortran/lib || true
      
      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install dependencies
        run: |
          install.packages(c("remotes"))
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("covr")
        shell: Rscript {0}

      ## A refresh of the cache can be forced by incrementing
      ## the number at the end of `key`. This should be done whenever
      ## the following step downloads new files or when the file format
      ## on the server might have changed.
      - name: Cache Argo downloads
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/argo-cache-dir
          key: argo-cache-dir-coverage-1
          
      - name: Ensure Argo cache directory exists
        env:
          R_ARGOFLOATS_DESTDIR: ${{ runner.temp }}/argo-cache-dir
        run: |
          if (!dir.exists(Sys.getenv("R_ARGOFLOATS_DESTDIR"))) {
            dir.create(Sys.getenv("R_ARGOFLOATS_DESTDIR"))
          }
        shell: Rscript {0}

      - name: Test coverage
        env:
          R_ARGOFLOATS_DESTDIR: ${{ runner.temp }}/argo-cache-dir
          R_ARGOFLOATS_INDEX_AGE: "Inf"
          R_ARGOFLOATS_PROFILE_AGE: "Inf"
        run: covr::codecov()
        shell: Rscript {0}
