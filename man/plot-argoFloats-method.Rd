% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.R
\name{plot,argoFloats-method}
\alias{plot,argoFloats-method}
\title{Plot an argoFloats object}
\usage{
\S4method{plot}{argoFloats}(
  x,
  which = "map",
  bathymetry = TRUE,
  xlim = NULL,
  ylim = NULL,
  xlab = NULL,
  ylab = NULL,
  cex = NULL,
  col = NULL,
  pch = NULL,
  bg = NULL,
  mar = NULL,
  mgp = NULL,
  eos = "gsw",
  debug = 0,
  ...
)
}
\arguments{
\item{x}{an \code{\linkS4class{argoFloats}} object.}

\item{which}{a character value indicating the type of plot; see \dQuote{Details}.}

\item{bathymetry}{an argument used only if \code{which="map"}, to control
whether (and how) to indicate water depth; see `\dQuote{Details}.}

\item{xlim, ylim}{numerical values, each a two-element vector, that
set the \code{x} and \code{y} limits of plot axes, as for \code{\link[=plot.default]{plot.default()}} and other conventional
plotting functions.}

\item{xlab}{a character value indicating the name for the horizontal axis, or
\code{NULL}, which indicates that this function should choose an appropriate name
depending on the value of \code{which}. Note that \code{xlab} is not obeyed if
\code{which="TS"}, because altering that label can be confusing to the user.}

\item{ylab}{as \code{xlab}, but for the vertical axis.}

\item{cex}{a character expansion factor for plot symbols, or \code{NULL}, to get an
value that depends on the value of \code{which}.}

\item{col}{the colour to be used for plot symbols, or \code{NULL}, to get an value
that depends on the value of \code{which}.
(See \code{\link[=par]{par()}} for more on specifying \code{pch}.)}

\item{pch}{an integer or code indicating the type of plot symbol, or \code{NULL},
to get a value that depends on the value of \code{which}.
(See \code{\link[=par]{par()}} for more on specifying \code{pch}.)}

\item{bg}{the colour to be used for plot symbol interior, for \code{pch}
values that distinguish between the interior of the symbol and the
border, e.g. for \code{pch=21}.}

\item{mar}{either a four-element vector giving the margins to be used for
the plot (see \code{\link[=par]{par()}} for details), or \code{NULL}, which means to use
\link{par}\code{("mar")}.}

\item{mgp}{either a three-element vector giving the geometry for
axis labels (see \code{\link[=par]{par()}} for details), or \code{NULL}, which means to use
\link{par}\code{("mgp")}.}

\item{eos}{a character value indicating the equation of state to use
if \code{which="TS"}.  This must be \code{"gsw"} (the default) or \code{"unesco"};
see \code{\link[oce:plotTS]{oce::plotTS()}}.}

\item{debug}{an integer specifying the level of debugging.}

\item{\dots}{extra arguments passed to the plot calls that are made
within this function.}
}
\description{
The action depends on the \code{type} of the object, and
this is set up by the function that created the object;
see \dQuote{Details}.
}
\details{
The various plot types are as follows.
\itemize{
\item For \code{which="map"}, a map of profile locations is created. This
only works if the \code{type} is \code{"index"} (meaning that \code{x} was created
by \code{\link[=getIndex]{getIndex()}} or a subset of such an object, created with
\code{\link[=subset,argoFloats-method]{subset,argoFloats-method()}}), or \code{argos} (meaning that
\code{x} was created with \code{\link[=readProfiles]{readProfiles()}}.  The plot range is
auto-selected.  If the \code{ocedata} package
is available, then its \code{coastlineWorldFine} dataset is used to draw
a coastline (which will be visible only if the plot region
is large enough); otherwise, if the \code{oce} package is available, then its
\code{coastlineWorld} dataset is used.
The \code{bathymetry} argument controls whether (and how) to draw a map underlay
that shows water depth. There are three possible values for \code{bathymetry}:
\enumerate{
\item \code{FALSE}, meaning not to draw bathymetry;
\item \code{TRUE} (the default), meaning to draw bathymetry using
data downloaded with \code{\link[marmap:getNOAA.bathy]{marmap::getNOAA.bathy()}}, as in Example 4;
\item A list with items controlling both the bathymetry data and its
representation in the plot, as in Example 5.  Those items are:
a. \code{source}, a mandatory value that either the string \code{"auto"} (the default) to use
\code{\link[marmap:getNOAA.bathy]{marmap::getNOAA.bathy()}} to download the data, or a value
returned by a previous call to that function;
b. \code{keep}, an optional logical value (with \code{TRUE} as the default) that is passed to
\code{\link[marmap:getNOAA.bathy]{marmap::getNOAA.bathy()}} to indicate whether to keep a local file of bathymetry,
as a way to avoid intermittent problems with the NOAA server;
c. \code{colormap}, an optional value that is either the string \code{"auto"} (the default)
for a form of GEBCO colors computed with \code{\link[oce:oceColorsGebco]{oce::oceColorsGebco()}}, or a value
computed with \code{\link[oce:colormap]{oce::colormap()}} applied to the bathymetry data; and
d. \code{palette}, an optional logical value (with \code{TRUE} as the default)
indicating whether to draw a depth-color palette to the right of the plot.
}
\item For \code{which="TS"},  an overall TS plot is created.  This only works if \code{x}
is an object that was created by \code{\link[=readProfiles]{readProfiles()}}. The scales for the plot
can be altered by putting \code{Slim} and \code{Tlim} arguments in the \code{...} list; see
the documentation for \code{\link[oce:plotTS]{oce::plotTS()}} for other arguments that can be
provided. This plot has a default color code to represent bad vs good data.
Bad data, flagged 3, 4, 6, and 7, is represented with red dots, and good
data, flaged 1, 2, 5, and 8, is displayed in black dots. See reference
1 (section 3.2.1) for the distinction between good and bad data.
\item For \code{which="QC"}, two time-series panels are shown, with
time being that recorded in the individual profile in the dataset.
An additional argument named \code{parameter} must be given, to name the
quantity of interest.  The function only works if \code{x} is an
\code{\linkS4class{argoFloats}} object created with \code{\link[=readProfiles]{readProfiles()}}.
The top panel shows the percent of data flagged with codes
1 (meaning good data), 2 (probably good), 5 (changed)
or 8 (estimated).  Thus, low values on the top panel reveal
profiles that are questionable. Note that if all of data at a given time
have flag 0, meaning not assessed, then a quality of 0 is plotted at that
time. The bottom panel shows the mean value of the parameter in question
regardless of the flag value. See Example 7.
}
}
\examples{
# Example 1: map profiles in index, highlighting a neighborhood of 30
library(argoFloats)
data(index)
plot(index, bathymetry=FALSE)
lon <- index[["longitude"]]
lat <- index[["latitude"]]
dist <- oce::geodDist(lon, lat, -77.06, 26.54)
o <- order(dist)
index30 <- subset(index, o[1:30])
points(index30[["longitude"]], index30[["latitude"]], pch=20, col="blue")

# Example 3: TS of first 10 profiles
# (Slow, so not run by default.)
\dontrun{
index10 <- subset(index, 1:10)
profiles10 <- getProfiles(index10, destdir="~/data/argo")
argos10 <- readProfiles(profiles10)
plot(argos10, which="TS")}

# Example 4: map with bathymetry
# (Slow, so not run by default.)
\dontrun{
par(mar=c(3, 3, 1, 1))
plot(index, bathymetry=TRUE)}

# Example 5: map with fine-grained bathymetry control
# (Slow, so not run by default.)
\dontrun{
par(mar=c(3, 3, 1, 1))
# Note that colormap shows water depth, not elevation above sea level
bathy <- marmap::getNOAA.bathy(-82, -71, 23, 30, 2, keep=TRUE)
cm <- colormap(zlim=c(0, -min(bathy)), col=function(...) rev(oceColorsGebco(...)))
plot(index, bathymetry=list(source=bathy, keep=TRUE, colormap=cm, palette=TRUE))}

# Example 6: TS plot for a particular argo
library(argoFloats)
a <- readProfiles(system.file("extdata", "SR2902204_131.nc", package="argoFloats"))
plot(a, which="TS")

# Example 7: Temperature QC plot for an id in Arabian Sea
\dontrun{
library(argoFloats)
ais <- getIndex(filename='synthetic', age=0)
sub <- subset(ais, id='2902123')
lonRect <- c(56, 66)
latRect <- c(11,12)
s <- subset(sub, rectangle=list(longitude=lonRect, latitude=latRect))
profiles <- getProfiles(s)
argos <- readProfiles(profiles)
plot(argos, which='QC', parameter='temperature')}

}
\references{
\enumerate{
\item Carval, Thierry, Bob Keeley, Yasushi Takatsuki, Takashi Yoshida, Stephen Loch Loch,
Claudia Schmid, and Roger Goldsmith. Argo Userâ€™s Manual V3.3. Ifremer, 2019.
\url{https://doi.org/10.13155/29825}.
}
}
\author{
Dan Kelley
}
