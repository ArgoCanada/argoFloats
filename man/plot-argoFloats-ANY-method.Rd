% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.R
\name{plot,argoFloats,ANY-method}
\alias{plot,argoFloats,ANY-method}
\alias{plot,argoFloats-method}
\title{Plot an argoFloats object}
\usage{
\S4method{plot}{argoFloats,ANY}(
  x,
  which = "map",
  bathymetry = TRUE,
  xlim = NULL,
  ylim = NULL,
  xlab = NULL,
  ylab = NULL,
  cex = NULL,
  col = NULL,
  pch = NULL,
  bg = NULL,
  mar = NULL,
  mgp = NULL,
  eos = "gsw",
  debug = 0,
  ...
)
}
\arguments{
\item{x}{an \code{\linkS4class{argoFloats}} object.}

\item{which}{a string that indicates the type of plot; see \dQuote{Details}.}

\item{bathymetry}{an argument used only if \code{which="map"}, to control
whether (and how) to indicate water depth; see `\dQuote{Details}.}

\item{xlim, ylim}{limits of plot axes, as for \code{\link[=plot.default]{plot.default()}} and other conventional
plotting functions.}

\item{xlab}{character value indicating the name for the horizontal axis, or
\code{NULL}, which indicates that this function should choose an appropriate name
depending on the value of \code{which}. Note that \code{xlab} is not obeyed if
\code{which="TS"}, because altering that label can be confusing to the user.}

\item{ylab}{as \code{xlab}, but for th vertical axis.}

\item{cex}{character expansion factor for plot symbols, or \code{NULL}, to get an
value that depends on the value of \code{which}.}

\item{col}{colour to be used for plot symbols, or \code{NULL}, to get an
value that depends on the value of \code{which}.}

\item{pch}{number indicating the type of plot symbol, or \code{NULL}, to get an
value that depends on the value of \code{which}.}

\item{bg}{colour to be used for plot symbol interior, for \code{pch}
values that distinguish between the interior of the symbol and the
border, e.g. for \code{pch=21}.}

\item{mar}{either a four-element vector giving the margins to be used for
the plot (see \code{\link[=par]{par()}} for details), or \code{NULL}, which means to use
\link{par}\code{("mar")}.}

\item{mgp}{either a three-element vector giving the geometry for
axis labels (see \code{\link[=par]{par()}} for details), or \code{NULL}, which means to use
\link{par}\code{("mgp")}.}

\item{eos}{character value indicating the equation of state to use
if \code{which="TS"}.  This must be \code{"gsw"} (the default) or \code{"unesco"};
see \code{\link[oce:plotTS]{oce::plotTS()}}.}

\item{debug}{an integer specifying the level of debugging.}

\item{\dots}{extra arguments passed to the plot calls that are made
to within this function.}
}
\description{
The action depends on the \code{type} of the object, and
this is set up by the function that created the object;
see \dQuote{Details}.
}
\details{
The various plot types are as follows.
\itemize{
\item For \code{which="map"}, a map of profile locations is created. This
only works if the \code{type} is \code{"index"} (meaning that \code{x} was created
by \code{\link[=getIndex]{getIndex()}} or a subset of such an object, created with
\code{\link[=subset,argoFloats-method]{subset,argoFloats-method()}}), or \code{argos} (meaning that
\code{x} was created with \code{\link[=readProfiles]{readProfiles()}}.  The plot range is
auto-selected.  If the \code{ocedata} package
is available, then its \code{coastlineWorldFine} dataset is used to draw
a coastline (which will be visible only if the plot region
is large enough); otherwise, if the \code{oce} package is available, then its
\code{coastlineWorld} dataset is used.
The \code{bathymetry} argument controls whether (and how) to draw a map underlay
that shows water depth. There are three possible values for \code{bathymetry}:
\enumerate{
\item \code{FALSE}, meaning not to draw bathymetry;
\item \code{TRUE} (the default), meaning to draw bathymetry using
data downloaded with \code{\link[marmap:getNOAA.bathy]{marmap::getNOAA.bathy()}}, as in Example 4;
\item A list with items controlling both the bathymetry data and its
representation in the plot, as in Example 5.  Those items are:
a. \code{source}, a mandatory value that either the string \code{"auto"} (the default) to use
\code{\link[marmap:getNOAA.bathy]{marmap::getNOAA.bathy()}} to download the data, or a value
returned by a previous call to that function;
b. \code{keep}, an optional logical value (with \code{TRUE} as the default) that is passed to
\code{\link[marmap:getNOAA.bathy]{marmap::getNOAA.bathy()}} to indicate whether to keep a local file of bathymetry,
as a way to avoid intermittent problems with the NOAA server;
c. \code{colormap}, an optional value that is either the string \code{"auto"} (the default)
for a form of GEBCO colors computed with \code{\link[oce:oceColorsGebco]{oce::oceColorsGebco()}}, or a value
computed with \code{\link[oce:colormap]{oce::colormap()}} applied to the bathymetry data; and
d. \code{palette}, an optional logical value (with \code{TRUE} as the default)
indicating whether to draw a depth-color palette to the right of the plot.
}
\item For \code{which="TS"},  an overall TS plot is created.  This
only works if \code{x} is an object that was created by  \code{\link[=getProfiles]{getProfiles()}}.
The scales for the plot can be altered by putting \code{Slim} and \code{Tlim}
arguments in the \code{...} list; see the documentation for \code{\link[oce:plotTS]{oce::plotTS()}}
for other arguments that can be provided.
\item For \code{which='diagnostic'}, a plot of variable quality and variable mean
are plotted. This only works if \code{x} is an object that was created by
\code{\link[=getProfiles]{getProfiles()}}. The user must also provide the \code{variable} name of
interest.
}
}
\examples{
# Example 1: map profiles in index, highlighting a neighborhood of 30
library(argoFloats)
library(oce)
data(index)
plot(index, bathymetry=FALSE)
lon <- index[["longitude"]]
lat <- index[["latitude"]]
dist <- geodDist(lon, lat, -77.06, 26.54)
o <- order(dist)
index30 <- subset(index, o[1:30])
points(index30[["longitude"]], index30[["latitude"]], pch=20, col="blue")

# Example 3: TS of first 10 profiles
# (Slow, so not run by default.)
\dontrun{
profiles10 <- getProfiles(index10, destdir="~/data/argo")
argos10 <- readProfiles(profiles10)
plot(argos10, which="TS")}

# Example 4: map with bathymetry
# (Slow, so not run by default.)
\dontrun{
par(mar=c(3, 3, 1, 1))
plot(index, bathymetry=TRUE)}

# Example 5: map with fine-grained bathymetry control
# (Slow, so not run by default.)
\dontrun{
par(mar=c(3, 3, 1, 1))
# Note that colormap shows water depth, not elevation above sea level
bathy <- marmap::getNOAA.bathy(-82, -71, 23, 30, 2, keep=TRUE)
cm <- colormap(zlim=c(0, -min(bathy)), col=function(...) rev(oceColorsGebco(...)))
plot(index, bathymetry=list(source=bathy, keep=TRUE, colormap=cm, palette=TRUE))}

}
\author{
Dan Kelley
}
